
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'COLON COMMA DIFF DIVIDE ELSE EQUAL FLOAT G_THAN ID IF INT L_BRACE L_PAREN L_THAN MINUS PLUS PRINT PROGRAM R_BRACE R_PAREN SEMICOLON STRING TIMES VARS\n    program : PROGRAM ID SEMICOLON program2\n\n    program2 : vars program3\n             | program3\n\n    program3 : bloque empty\n    \n    vars : VARS vars2\n\n    vars2 : ID COMMA vars2\n          | ID COLON tipo SEMICOLON vars3\n\n    vars3 : vars2\n          | empty\n    \n    tipo : INT empty\n         | FLOAT empty\n    \n    bloque : L_BRACE bloque2 R_BRACE empty\n\n    bloque2 : estatuto bloque2\n            | empty\n    \n    estatuto : asignacion empty\n             | condicion empty\n             | escritura empty\n    \n    asignacion : ID EQUAL expresion SEMICOLON empty\n    \n    escritura : PRINT L_PAREN escritura2 R_PAREN SEMICOLON empty\n\n    escritura2 : expresion escritura3\n               | STRING escritura3\n\n    escritura3 : COMMA escritura2\n               | empty\n    \n    expresion : exp expresion2\n\n    expresion2 : G_THAN exp empty\n               | L_THAN exp empty\n               | DIFF exp empty\n               | empty\n    \n    condicion : IF L_PAREN expresion R_PAREN bloque condicion2 SEMICOLON empty\n\n    condicion2 : ELSE bloque empty\n               | empty\n    \n    exp : termino exp2\n\n    exp2 : PLUS exp\n         | MINUS exp\n         | empty\n    \n    termino : factor termino2\n\n    termino2 : TIMES termino\n             | DIVIDE termino\n             | empty\n\n    \n    factor : factor2\n           | factor3\n\n    factor2 : L_PAREN expresion R_PAREN empty\n\n    factor3 : PLUS var_cte empty\n            | MINUS var_cte empty\n            | var_cte empty\n    \n    var_cte : ID empty\n            | INT empty\n            | FLOAT empty\n    \n    empty :\n    '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,5,7,9,11,14,26,38,],[0,-1,-3,-49,-2,-4,-49,-12,]),'ID':([2,8,10,17,18,19,20,24,28,29,30,31,32,33,46,47,49,56,60,62,64,65,67,68,71,72,83,89,101,110,111,113,],[3,13,21,21,-49,-49,-49,13,-15,-16,-17,39,39,39,39,39,39,13,-49,39,39,39,39,39,39,39,39,-18,-49,-19,-49,-29,]),'SEMICOLON':([3,26,35,36,37,38,39,40,41,42,43,44,45,48,50,51,57,58,59,61,63,66,69,70,73,75,76,77,78,79,81,90,91,92,93,94,95,96,97,98,99,100,103,104,105,106,107,108,112,114,],[4,-49,56,-49,-49,-12,-49,60,-49,-49,-49,-40,-41,-49,-49,-49,-10,-11,-46,-24,-28,-32,-35,-36,-39,-49,-45,-49,-47,-48,101,-49,-49,-49,-33,-34,-37,-38,-49,-43,-44,-49,-25,-26,-27,-42,111,-31,-49,-30,]),'VARS':([4,],[8,]),'L_BRACE':([4,6,12,34,56,80,86,87,88,109,],[10,10,-5,-6,-49,10,-7,-8,-9,10,]),'R_BRACE':([10,15,16,17,18,19,20,27,28,29,30,60,89,101,110,111,113,],[-49,26,-14,-49,-49,-49,-49,-13,-15,-16,-17,-49,-18,-49,-19,-49,-29,]),'IF':([10,17,18,19,20,28,29,30,60,89,101,110,111,113,],[22,22,-49,-49,-49,-15,-16,-17,-49,-18,-49,-19,-49,-29,]),'PRINT':([10,17,18,19,20,28,29,30,60,89,101,110,111,113,],[23,23,-49,-49,-49,-15,-16,-17,-49,-18,-49,-19,-49,-29,]),'COMMA':([13,39,41,42,43,44,45,48,50,51,54,55,59,61,63,66,69,70,73,75,76,77,78,79,90,91,92,93,94,95,96,97,98,99,103,104,105,106,],[24,-49,-49,-49,-49,-40,-41,-49,-49,-49,83,83,-46,-24,-28,-32,-35,-36,-39,-49,-45,-49,-47,-48,-49,-49,-49,-33,-34,-37,-38,-49,-43,-44,-25,-26,-27,-42,]),'COLON':([13,],[25,]),'EQUAL':([21,],[31,]),'L_PAREN':([22,23,31,32,33,46,62,64,65,67,68,71,72,83,],[32,33,46,46,46,46,46,46,46,46,46,46,46,46,]),'INT':([25,31,32,33,46,47,49,62,64,65,67,68,71,72,83,],[36,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'FLOAT':([25,31,32,33,46,47,49,62,64,65,67,68,71,72,83,],[37,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'ELSE':([26,38,100,],[-49,-12,109,]),'PLUS':([31,32,33,39,42,43,44,45,46,48,50,51,59,62,64,65,67,68,70,71,72,73,75,76,77,78,79,83,95,96,97,98,99,106,],[47,47,47,-49,67,-49,-40,-41,47,-49,-49,-49,-46,47,47,47,47,47,-36,47,47,-39,-49,-45,-49,-47,-48,47,-37,-38,-49,-43,-44,-42,]),'MINUS':([31,32,33,39,42,43,44,45,46,48,50,51,59,62,64,65,67,68,70,71,72,73,75,76,77,78,79,83,95,96,97,98,99,106,],[49,49,49,-49,68,-49,-40,-41,49,-49,-49,-49,-46,49,49,49,49,49,-36,49,49,-39,-49,-45,-49,-47,-48,49,-37,-38,-49,-43,-44,-42,]),'STRING':([33,83,],[55,55,]),'TIMES':([39,43,44,45,48,50,51,59,75,76,77,78,79,97,98,99,106,],[-49,71,-40,-41,-49,-49,-49,-46,-49,-45,-49,-47,-48,-49,-43,-44,-42,]),'DIVIDE':([39,43,44,45,48,50,51,59,75,76,77,78,79,97,98,99,106,],[-49,72,-40,-41,-49,-49,-49,-46,-49,-45,-49,-47,-48,-49,-43,-44,-42,]),'G_THAN':([39,41,42,43,44,45,48,50,51,59,66,69,70,73,75,76,77,78,79,93,94,95,96,97,98,99,106,],[-49,62,-49,-49,-40,-41,-49,-49,-49,-46,-32,-35,-36,-39,-49,-45,-49,-47,-48,-33,-34,-37,-38,-49,-43,-44,-42,]),'L_THAN':([39,41,42,43,44,45,48,50,51,59,66,69,70,73,75,76,77,78,79,93,94,95,96,97,98,99,106,],[-49,64,-49,-49,-40,-41,-49,-49,-49,-46,-32,-35,-36,-39,-49,-45,-49,-47,-48,-33,-34,-37,-38,-49,-43,-44,-42,]),'DIFF':([39,41,42,43,44,45,48,50,51,59,66,69,70,73,75,76,77,78,79,93,94,95,96,97,98,99,106,],[-49,65,-49,-49,-40,-41,-49,-49,-49,-46,-32,-35,-36,-39,-49,-45,-49,-47,-48,-33,-34,-37,-38,-49,-43,-44,-42,]),'R_PAREN':([39,41,42,43,44,45,48,50,51,52,53,54,55,59,61,63,66,69,70,73,74,75,76,77,78,79,82,84,85,90,91,92,93,94,95,96,97,98,99,102,103,104,105,106,],[-49,-49,-49,-49,-40,-41,-49,-49,-49,80,81,-49,-49,-46,-24,-28,-32,-35,-36,-39,97,-49,-45,-49,-47,-48,-20,-23,-21,-49,-49,-49,-33,-34,-37,-38,-49,-43,-44,-22,-25,-26,-27,-42,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'program2':([4,],[5,]),'vars':([4,],[6,]),'program3':([4,6,],[7,11,]),'bloque':([4,6,80,109,],[9,9,100,112,]),'vars2':([8,24,56,],[12,34,87,]),'empty':([9,10,17,18,19,20,26,36,37,39,41,42,43,48,50,51,54,55,56,60,75,77,90,91,92,97,100,101,111,112,],[14,16,16,28,29,30,38,57,58,59,63,69,73,76,78,79,84,84,88,89,98,99,103,104,105,106,108,110,113,114,]),'bloque2':([10,17,],[15,27,]),'estatuto':([10,17,],[17,17,]),'asignacion':([10,17,],[18,18,]),'condicion':([10,17,],[19,19,]),'escritura':([10,17,],[20,20,]),'tipo':([25,],[35,]),'expresion':([31,32,33,46,83,],[40,52,54,74,54,]),'exp':([31,32,33,46,62,64,65,67,68,83,],[41,41,41,41,90,91,92,93,94,41,]),'termino':([31,32,33,46,62,64,65,67,68,71,72,83,],[42,42,42,42,42,42,42,42,42,95,96,42,]),'factor':([31,32,33,46,62,64,65,67,68,71,72,83,],[43,43,43,43,43,43,43,43,43,43,43,43,]),'factor2':([31,32,33,46,62,64,65,67,68,71,72,83,],[44,44,44,44,44,44,44,44,44,44,44,44,]),'factor3':([31,32,33,46,62,64,65,67,68,71,72,83,],[45,45,45,45,45,45,45,45,45,45,45,45,]),'var_cte':([31,32,33,46,47,49,62,64,65,67,68,71,72,83,],[48,48,48,48,75,77,48,48,48,48,48,48,48,48,]),'escritura2':([33,83,],[53,102,]),'expresion2':([41,],[61,]),'exp2':([42,],[66,]),'termino2':([43,],[70,]),'escritura3':([54,55,],[82,85,]),'vars3':([56,],[86,]),'condicion2':([100,],[107,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID SEMICOLON program2','program',4,'p_program','ply_parser.py',11),
  ('program2 -> vars program3','program2',2,'p_program','ply_parser.py',13),
  ('program2 -> program3','program2',1,'p_program','ply_parser.py',14),
  ('program3 -> bloque empty','program3',2,'p_program','ply_parser.py',16),
  ('vars -> VARS vars2','vars',2,'p_vars','ply_parser.py',24),
  ('vars2 -> ID COMMA vars2','vars2',3,'p_vars','ply_parser.py',26),
  ('vars2 -> ID COLON tipo SEMICOLON vars3','vars2',5,'p_vars','ply_parser.py',27),
  ('vars3 -> vars2','vars3',1,'p_vars','ply_parser.py',29),
  ('vars3 -> empty','vars3',1,'p_vars','ply_parser.py',30),
  ('tipo -> INT empty','tipo',2,'p_tipo','ply_parser.py',37),
  ('tipo -> FLOAT empty','tipo',2,'p_tipo','ply_parser.py',38),
  ('bloque -> L_BRACE bloque2 R_BRACE empty','bloque',4,'p_bloque','ply_parser.py',45),
  ('bloque2 -> estatuto bloque2','bloque2',2,'p_bloque','ply_parser.py',47),
  ('bloque2 -> empty','bloque2',1,'p_bloque','ply_parser.py',48),
  ('estatuto -> asignacion empty','estatuto',2,'p_estatuto','ply_parser.py',55),
  ('estatuto -> condicion empty','estatuto',2,'p_estatuto','ply_parser.py',56),
  ('estatuto -> escritura empty','estatuto',2,'p_estatuto','ply_parser.py',57),
  ('asignacion -> ID EQUAL expresion SEMICOLON empty','asignacion',5,'p_asignacion','ply_parser.py',64),
  ('escritura -> PRINT L_PAREN escritura2 R_PAREN SEMICOLON empty','escritura',6,'p_escritura','ply_parser.py',71),
  ('escritura2 -> expresion escritura3','escritura2',2,'p_escritura','ply_parser.py',73),
  ('escritura2 -> STRING escritura3','escritura2',2,'p_escritura','ply_parser.py',74),
  ('escritura3 -> COMMA escritura2','escritura3',2,'p_escritura','ply_parser.py',76),
  ('escritura3 -> empty','escritura3',1,'p_escritura','ply_parser.py',77),
  ('expresion -> exp expresion2','expresion',2,'p_expresion','ply_parser.py',84),
  ('expresion2 -> G_THAN exp empty','expresion2',3,'p_expresion','ply_parser.py',86),
  ('expresion2 -> L_THAN exp empty','expresion2',3,'p_expresion','ply_parser.py',87),
  ('expresion2 -> DIFF exp empty','expresion2',3,'p_expresion','ply_parser.py',88),
  ('expresion2 -> empty','expresion2',1,'p_expresion','ply_parser.py',89),
  ('condicion -> IF L_PAREN expresion R_PAREN bloque condicion2 SEMICOLON empty','condicion',8,'p_condicion','ply_parser.py',96),
  ('condicion2 -> ELSE bloque empty','condicion2',3,'p_condicion','ply_parser.py',98),
  ('condicion2 -> empty','condicion2',1,'p_condicion','ply_parser.py',99),
  ('exp -> termino exp2','exp',2,'p_exp','ply_parser.py',106),
  ('exp2 -> PLUS exp','exp2',2,'p_exp','ply_parser.py',108),
  ('exp2 -> MINUS exp','exp2',2,'p_exp','ply_parser.py',109),
  ('exp2 -> empty','exp2',1,'p_exp','ply_parser.py',110),
  ('termino -> factor termino2','termino',2,'p_termino','ply_parser.py',117),
  ('termino2 -> TIMES termino','termino2',2,'p_termino','ply_parser.py',119),
  ('termino2 -> DIVIDE termino','termino2',2,'p_termino','ply_parser.py',120),
  ('termino2 -> empty','termino2',1,'p_termino','ply_parser.py',121),
  ('factor -> factor2','factor',1,'p_factor','ply_parser.py',129),
  ('factor -> factor3','factor',1,'p_factor','ply_parser.py',130),
  ('factor2 -> L_PAREN expresion R_PAREN empty','factor2',4,'p_factor','ply_parser.py',132),
  ('factor3 -> PLUS var_cte empty','factor3',3,'p_factor','ply_parser.py',134),
  ('factor3 -> MINUS var_cte empty','factor3',3,'p_factor','ply_parser.py',135),
  ('factor3 -> var_cte empty','factor3',2,'p_factor','ply_parser.py',136),
  ('var_cte -> ID empty','var_cte',2,'p_var_cte','ply_parser.py',143),
  ('var_cte -> INT empty','var_cte',2,'p_var_cte','ply_parser.py',144),
  ('var_cte -> FLOAT empty','var_cte',2,'p_var_cte','ply_parser.py',145),
  ('empty -> <empty>','empty',0,'p_empty','ply_parser.py',157),
]
