Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID SEMICOLON program2
Rule 2     program2 -> vars program3
Rule 3     program2 -> program3
Rule 4     program3 -> bloque empty
Rule 5     vars -> VARS vars2
Rule 6     vars2 -> ID COMMA vars2
Rule 7     vars2 -> ID COLON tipo SEMICOLON vars3
Rule 8     vars3 -> vars2
Rule 9     vars3 -> empty
Rule 10    tipo -> INT empty
Rule 11    tipo -> FLOAT empty
Rule 12    bloque -> L_BRACE bloque2 R_BRACE empty
Rule 13    bloque2 -> estatuto bloque2
Rule 14    bloque2 -> empty
Rule 15    estatuto -> asignacion empty
Rule 16    estatuto -> condicion empty
Rule 17    estatuto -> escritura empty
Rule 18    asignacion -> ID EQUAL expresion SEMICOLON empty
Rule 19    escritura -> PRINT L_PAREN escritura2 R_PAREN SEMICOLON empty
Rule 20    escritura2 -> expresion escritura3
Rule 21    escritura2 -> STRING escritura3
Rule 22    escritura3 -> COMMA escritura2
Rule 23    escritura3 -> empty
Rule 24    expresion -> exp expresion2
Rule 25    expresion2 -> G_THAN exp empty
Rule 26    expresion2 -> L_THAN exp empty
Rule 27    expresion2 -> DIFF exp empty
Rule 28    expresion2 -> empty
Rule 29    condicion -> IF L_PAREN expresion R_PAREN bloque condicion2 SEMICOLON empty
Rule 30    condicion2 -> ELSE bloque empty
Rule 31    condicion2 -> empty
Rule 32    exp -> termino exp2
Rule 33    exp2 -> PLUS exp
Rule 34    exp2 -> MINUS exp
Rule 35    exp2 -> empty
Rule 36    termino -> factor termino2
Rule 37    termino2 -> TIMES termino
Rule 38    termino2 -> DIVIDE termino
Rule 39    termino2 -> empty
Rule 40    factor -> factor2
Rule 41    factor -> factor3
Rule 42    factor2 -> L_PAREN expresion R_PAREN empty
Rule 43    factor3 -> PLUS var_cte empty
Rule 44    factor3 -> MINUS var_cte empty
Rule 45    factor3 -> var_cte empty
Rule 46    var_cte -> ID empty
Rule 47    var_cte -> INT empty
Rule 48    var_cte -> FLOAT empty
Rule 49    empty -> <empty>

Terminals, with rules where they appear

COLON                : 7
COMMA                : 6 22
DIFF                 : 27
DIVIDE               : 38
ELSE                 : 30
EQUAL                : 18
FLOAT                : 11 48
G_THAN               : 25
ID                   : 1 6 7 18 46
IF                   : 29
INT                  : 10 47
L_BRACE              : 12
L_PAREN              : 19 29 42
L_THAN               : 26
MINUS                : 34 44
PLUS                 : 33 43
PRINT                : 19
PROGRAM              : 1
R_BRACE              : 12
R_PAREN              : 19 29 42
SEMICOLON            : 1 7 18 19 29
STRING               : 21
TIMES                : 37
VARS                 : 5
error                : 

Nonterminals, with rules where they appear

asignacion           : 15
bloque               : 4 29 30
bloque2              : 12 13
condicion            : 16
condicion2           : 29
empty                : 4 9 10 11 12 14 15 16 17 18 19 23 25 26 27 28 29 30 31 35 39 42 43 44 45 46 47 48
escritura            : 17
escritura2           : 19 22
escritura3           : 20 21
estatuto             : 13
exp                  : 24 25 26 27 33 34
exp2                 : 32
expresion            : 18 20 29 42
expresion2           : 24
factor               : 36
factor2              : 40
factor3              : 41
program              : 0
program2             : 1
program3             : 2 3
termino              : 32 37 38
termino2             : 36
tipo                 : 7
var_cte              : 43 44 45
vars                 : 2
vars2                : 5 6 8
vars3                : 7

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID SEMICOLON program2

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID SEMICOLON program2

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . SEMICOLON program2

    SEMICOLON       shift and go to state 4


state 4

    (1) program -> PROGRAM ID SEMICOLON . program2
    (2) program2 -> . vars program3
    (3) program2 -> . program3
    (5) vars -> . VARS vars2
    (4) program3 -> . bloque empty
    (12) bloque -> . L_BRACE bloque2 R_BRACE empty

    VARS            shift and go to state 8
    L_BRACE         shift and go to state 10

    program2                       shift and go to state 5
    vars                           shift and go to state 6
    program3                       shift and go to state 7
    bloque                         shift and go to state 9

state 5

    (1) program -> PROGRAM ID SEMICOLON program2 .

    $end            reduce using rule 1 (program -> PROGRAM ID SEMICOLON program2 .)


state 6

    (2) program2 -> vars . program3
    (4) program3 -> . bloque empty
    (12) bloque -> . L_BRACE bloque2 R_BRACE empty

    L_BRACE         shift and go to state 10

    program3                       shift and go to state 11
    bloque                         shift and go to state 9

state 7

    (3) program2 -> program3 .

    $end            reduce using rule 3 (program2 -> program3 .)


state 8

    (5) vars -> VARS . vars2
    (6) vars2 -> . ID COMMA vars2
    (7) vars2 -> . ID COLON tipo SEMICOLON vars3

    ID              shift and go to state 13

    vars2                          shift and go to state 12

state 9

    (4) program3 -> bloque . empty
    (49) empty -> .

    $end            reduce using rule 49 (empty -> .)

    empty                          shift and go to state 14

state 10

    (12) bloque -> L_BRACE . bloque2 R_BRACE empty
    (13) bloque2 -> . estatuto bloque2
    (14) bloque2 -> . empty
    (15) estatuto -> . asignacion empty
    (16) estatuto -> . condicion empty
    (17) estatuto -> . escritura empty
    (49) empty -> .
    (18) asignacion -> . ID EQUAL expresion SEMICOLON empty
    (29) condicion -> . IF L_PAREN expresion R_PAREN bloque condicion2 SEMICOLON empty
    (19) escritura -> . PRINT L_PAREN escritura2 R_PAREN SEMICOLON empty

    R_BRACE         reduce using rule 49 (empty -> .)
    ID              shift and go to state 21
    IF              shift and go to state 22
    PRINT           shift and go to state 23

    bloque2                        shift and go to state 15
    empty                          shift and go to state 16
    estatuto                       shift and go to state 17
    asignacion                     shift and go to state 18
    condicion                      shift and go to state 19
    escritura                      shift and go to state 20

state 11

    (2) program2 -> vars program3 .

    $end            reduce using rule 2 (program2 -> vars program3 .)


state 12

    (5) vars -> VARS vars2 .

    L_BRACE         reduce using rule 5 (vars -> VARS vars2 .)


state 13

    (6) vars2 -> ID . COMMA vars2
    (7) vars2 -> ID . COLON tipo SEMICOLON vars3

    COMMA           shift and go to state 24
    COLON           shift and go to state 25


state 14

    (4) program3 -> bloque empty .

    $end            reduce using rule 4 (program3 -> bloque empty .)


state 15

    (12) bloque -> L_BRACE bloque2 . R_BRACE empty

    R_BRACE         shift and go to state 26


state 16

    (14) bloque2 -> empty .

    R_BRACE         reduce using rule 14 (bloque2 -> empty .)


state 17

    (13) bloque2 -> estatuto . bloque2
    (13) bloque2 -> . estatuto bloque2
    (14) bloque2 -> . empty
    (15) estatuto -> . asignacion empty
    (16) estatuto -> . condicion empty
    (17) estatuto -> . escritura empty
    (49) empty -> .
    (18) asignacion -> . ID EQUAL expresion SEMICOLON empty
    (29) condicion -> . IF L_PAREN expresion R_PAREN bloque condicion2 SEMICOLON empty
    (19) escritura -> . PRINT L_PAREN escritura2 R_PAREN SEMICOLON empty

    R_BRACE         reduce using rule 49 (empty -> .)
    ID              shift and go to state 21
    IF              shift and go to state 22
    PRINT           shift and go to state 23

    estatuto                       shift and go to state 17
    bloque2                        shift and go to state 27
    empty                          shift and go to state 16
    asignacion                     shift and go to state 18
    condicion                      shift and go to state 19
    escritura                      shift and go to state 20

state 18

    (15) estatuto -> asignacion . empty
    (49) empty -> .

    ID              reduce using rule 49 (empty -> .)
    IF              reduce using rule 49 (empty -> .)
    PRINT           reduce using rule 49 (empty -> .)
    R_BRACE         reduce using rule 49 (empty -> .)

    empty                          shift and go to state 28

state 19

    (16) estatuto -> condicion . empty
    (49) empty -> .

    ID              reduce using rule 49 (empty -> .)
    IF              reduce using rule 49 (empty -> .)
    PRINT           reduce using rule 49 (empty -> .)
    R_BRACE         reduce using rule 49 (empty -> .)

    empty                          shift and go to state 29

state 20

    (17) estatuto -> escritura . empty
    (49) empty -> .

    ID              reduce using rule 49 (empty -> .)
    IF              reduce using rule 49 (empty -> .)
    PRINT           reduce using rule 49 (empty -> .)
    R_BRACE         reduce using rule 49 (empty -> .)

    empty                          shift and go to state 30

state 21

    (18) asignacion -> ID . EQUAL expresion SEMICOLON empty

    EQUAL           shift and go to state 31


state 22

    (29) condicion -> IF . L_PAREN expresion R_PAREN bloque condicion2 SEMICOLON empty

    L_PAREN         shift and go to state 32


state 23

    (19) escritura -> PRINT . L_PAREN escritura2 R_PAREN SEMICOLON empty

    L_PAREN         shift and go to state 33


state 24

    (6) vars2 -> ID COMMA . vars2
    (6) vars2 -> . ID COMMA vars2
    (7) vars2 -> . ID COLON tipo SEMICOLON vars3

    ID              shift and go to state 13

    vars2                          shift and go to state 34

state 25

    (7) vars2 -> ID COLON . tipo SEMICOLON vars3
    (10) tipo -> . INT empty
    (11) tipo -> . FLOAT empty

    INT             shift and go to state 36
    FLOAT           shift and go to state 37

    tipo                           shift and go to state 35

state 26

    (12) bloque -> L_BRACE bloque2 R_BRACE . empty
    (49) empty -> .

    $end            reduce using rule 49 (empty -> .)
    ELSE            reduce using rule 49 (empty -> .)
    SEMICOLON       reduce using rule 49 (empty -> .)

    empty                          shift and go to state 38

state 27

    (13) bloque2 -> estatuto bloque2 .

    R_BRACE         reduce using rule 13 (bloque2 -> estatuto bloque2 .)


state 28

    (15) estatuto -> asignacion empty .

    ID              reduce using rule 15 (estatuto -> asignacion empty .)
    IF              reduce using rule 15 (estatuto -> asignacion empty .)
    PRINT           reduce using rule 15 (estatuto -> asignacion empty .)
    R_BRACE         reduce using rule 15 (estatuto -> asignacion empty .)


state 29

    (16) estatuto -> condicion empty .

    ID              reduce using rule 16 (estatuto -> condicion empty .)
    IF              reduce using rule 16 (estatuto -> condicion empty .)
    PRINT           reduce using rule 16 (estatuto -> condicion empty .)
    R_BRACE         reduce using rule 16 (estatuto -> condicion empty .)


state 30

    (17) estatuto -> escritura empty .

    ID              reduce using rule 17 (estatuto -> escritura empty .)
    IF              reduce using rule 17 (estatuto -> escritura empty .)
    PRINT           reduce using rule 17 (estatuto -> escritura empty .)
    R_BRACE         reduce using rule 17 (estatuto -> escritura empty .)


state 31

    (18) asignacion -> ID EQUAL . expresion SEMICOLON empty
    (24) expresion -> . exp expresion2
    (32) exp -> . termino exp2
    (36) termino -> . factor termino2
    (40) factor -> . factor2
    (41) factor -> . factor3
    (42) factor2 -> . L_PAREN expresion R_PAREN empty
    (43) factor3 -> . PLUS var_cte empty
    (44) factor3 -> . MINUS var_cte empty
    (45) factor3 -> . var_cte empty
    (46) var_cte -> . ID empty
    (47) var_cte -> . INT empty
    (48) var_cte -> . FLOAT empty

    L_PAREN         shift and go to state 46
    PLUS            shift and go to state 47
    MINUS           shift and go to state 49
    ID              shift and go to state 39
    INT             shift and go to state 50
    FLOAT           shift and go to state 51

    expresion                      shift and go to state 40
    exp                            shift and go to state 41
    termino                        shift and go to state 42
    factor                         shift and go to state 43
    factor2                        shift and go to state 44
    factor3                        shift and go to state 45
    var_cte                        shift and go to state 48

state 32

    (29) condicion -> IF L_PAREN . expresion R_PAREN bloque condicion2 SEMICOLON empty
    (24) expresion -> . exp expresion2
    (32) exp -> . termino exp2
    (36) termino -> . factor termino2
    (40) factor -> . factor2
    (41) factor -> . factor3
    (42) factor2 -> . L_PAREN expresion R_PAREN empty
    (43) factor3 -> . PLUS var_cte empty
    (44) factor3 -> . MINUS var_cte empty
    (45) factor3 -> . var_cte empty
    (46) var_cte -> . ID empty
    (47) var_cte -> . INT empty
    (48) var_cte -> . FLOAT empty

    L_PAREN         shift and go to state 46
    PLUS            shift and go to state 47
    MINUS           shift and go to state 49
    ID              shift and go to state 39
    INT             shift and go to state 50
    FLOAT           shift and go to state 51

    expresion                      shift and go to state 52
    exp                            shift and go to state 41
    termino                        shift and go to state 42
    factor                         shift and go to state 43
    factor2                        shift and go to state 44
    factor3                        shift and go to state 45
    var_cte                        shift and go to state 48

state 33

    (19) escritura -> PRINT L_PAREN . escritura2 R_PAREN SEMICOLON empty
    (20) escritura2 -> . expresion escritura3
    (21) escritura2 -> . STRING escritura3
    (24) expresion -> . exp expresion2
    (32) exp -> . termino exp2
    (36) termino -> . factor termino2
    (40) factor -> . factor2
    (41) factor -> . factor3
    (42) factor2 -> . L_PAREN expresion R_PAREN empty
    (43) factor3 -> . PLUS var_cte empty
    (44) factor3 -> . MINUS var_cte empty
    (45) factor3 -> . var_cte empty
    (46) var_cte -> . ID empty
    (47) var_cte -> . INT empty
    (48) var_cte -> . FLOAT empty

    STRING          shift and go to state 55
    L_PAREN         shift and go to state 46
    PLUS            shift and go to state 47
    MINUS           shift and go to state 49
    ID              shift and go to state 39
    INT             shift and go to state 50
    FLOAT           shift and go to state 51

    escritura2                     shift and go to state 53
    expresion                      shift and go to state 54
    exp                            shift and go to state 41
    termino                        shift and go to state 42
    factor                         shift and go to state 43
    factor2                        shift and go to state 44
    factor3                        shift and go to state 45
    var_cte                        shift and go to state 48

state 34

    (6) vars2 -> ID COMMA vars2 .

    L_BRACE         reduce using rule 6 (vars2 -> ID COMMA vars2 .)


state 35

    (7) vars2 -> ID COLON tipo . SEMICOLON vars3

    SEMICOLON       shift and go to state 56


state 36

    (10) tipo -> INT . empty
    (49) empty -> .

    SEMICOLON       reduce using rule 49 (empty -> .)

    empty                          shift and go to state 57

state 37

    (11) tipo -> FLOAT . empty
    (49) empty -> .

    SEMICOLON       reduce using rule 49 (empty -> .)

    empty                          shift and go to state 58

state 38

    (12) bloque -> L_BRACE bloque2 R_BRACE empty .

    $end            reduce using rule 12 (bloque -> L_BRACE bloque2 R_BRACE empty .)
    ELSE            reduce using rule 12 (bloque -> L_BRACE bloque2 R_BRACE empty .)
    SEMICOLON       reduce using rule 12 (bloque -> L_BRACE bloque2 R_BRACE empty .)


state 39

    (46) var_cte -> ID . empty
    (49) empty -> .

    TIMES           reduce using rule 49 (empty -> .)
    DIVIDE          reduce using rule 49 (empty -> .)
    PLUS            reduce using rule 49 (empty -> .)
    MINUS           reduce using rule 49 (empty -> .)
    G_THAN          reduce using rule 49 (empty -> .)
    L_THAN          reduce using rule 49 (empty -> .)
    DIFF            reduce using rule 49 (empty -> .)
    SEMICOLON       reduce using rule 49 (empty -> .)
    R_PAREN         reduce using rule 49 (empty -> .)
    COMMA           reduce using rule 49 (empty -> .)

    empty                          shift and go to state 59

state 40

    (18) asignacion -> ID EQUAL expresion . SEMICOLON empty

    SEMICOLON       shift and go to state 60


state 41

    (24) expresion -> exp . expresion2
    (25) expresion2 -> . G_THAN exp empty
    (26) expresion2 -> . L_THAN exp empty
    (27) expresion2 -> . DIFF exp empty
    (28) expresion2 -> . empty
    (49) empty -> .

    G_THAN          shift and go to state 62
    L_THAN          shift and go to state 64
    DIFF            shift and go to state 65
    SEMICOLON       reduce using rule 49 (empty -> .)
    R_PAREN         reduce using rule 49 (empty -> .)
    COMMA           reduce using rule 49 (empty -> .)

    expresion2                     shift and go to state 61
    empty                          shift and go to state 63

state 42

    (32) exp -> termino . exp2
    (33) exp2 -> . PLUS exp
    (34) exp2 -> . MINUS exp
    (35) exp2 -> . empty
    (49) empty -> .

    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    G_THAN          reduce using rule 49 (empty -> .)
    L_THAN          reduce using rule 49 (empty -> .)
    DIFF            reduce using rule 49 (empty -> .)
    SEMICOLON       reduce using rule 49 (empty -> .)
    R_PAREN         reduce using rule 49 (empty -> .)
    COMMA           reduce using rule 49 (empty -> .)

    exp2                           shift and go to state 66
    empty                          shift and go to state 69

state 43

    (36) termino -> factor . termino2
    (37) termino2 -> . TIMES termino
    (38) termino2 -> . DIVIDE termino
    (39) termino2 -> . empty
    (49) empty -> .

    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 72
    PLUS            reduce using rule 49 (empty -> .)
    MINUS           reduce using rule 49 (empty -> .)
    G_THAN          reduce using rule 49 (empty -> .)
    L_THAN          reduce using rule 49 (empty -> .)
    DIFF            reduce using rule 49 (empty -> .)
    SEMICOLON       reduce using rule 49 (empty -> .)
    R_PAREN         reduce using rule 49 (empty -> .)
    COMMA           reduce using rule 49 (empty -> .)

    termino2                       shift and go to state 70
    empty                          shift and go to state 73

state 44

    (40) factor -> factor2 .

    TIMES           reduce using rule 40 (factor -> factor2 .)
    DIVIDE          reduce using rule 40 (factor -> factor2 .)
    PLUS            reduce using rule 40 (factor -> factor2 .)
    MINUS           reduce using rule 40 (factor -> factor2 .)
    G_THAN          reduce using rule 40 (factor -> factor2 .)
    L_THAN          reduce using rule 40 (factor -> factor2 .)
    DIFF            reduce using rule 40 (factor -> factor2 .)
    SEMICOLON       reduce using rule 40 (factor -> factor2 .)
    R_PAREN         reduce using rule 40 (factor -> factor2 .)
    COMMA           reduce using rule 40 (factor -> factor2 .)


state 45

    (41) factor -> factor3 .

    TIMES           reduce using rule 41 (factor -> factor3 .)
    DIVIDE          reduce using rule 41 (factor -> factor3 .)
    PLUS            reduce using rule 41 (factor -> factor3 .)
    MINUS           reduce using rule 41 (factor -> factor3 .)
    G_THAN          reduce using rule 41 (factor -> factor3 .)
    L_THAN          reduce using rule 41 (factor -> factor3 .)
    DIFF            reduce using rule 41 (factor -> factor3 .)
    SEMICOLON       reduce using rule 41 (factor -> factor3 .)
    R_PAREN         reduce using rule 41 (factor -> factor3 .)
    COMMA           reduce using rule 41 (factor -> factor3 .)


state 46

    (42) factor2 -> L_PAREN . expresion R_PAREN empty
    (24) expresion -> . exp expresion2
    (32) exp -> . termino exp2
    (36) termino -> . factor termino2
    (40) factor -> . factor2
    (41) factor -> . factor3
    (42) factor2 -> . L_PAREN expresion R_PAREN empty
    (43) factor3 -> . PLUS var_cte empty
    (44) factor3 -> . MINUS var_cte empty
    (45) factor3 -> . var_cte empty
    (46) var_cte -> . ID empty
    (47) var_cte -> . INT empty
    (48) var_cte -> . FLOAT empty

    L_PAREN         shift and go to state 46
    PLUS            shift and go to state 47
    MINUS           shift and go to state 49
    ID              shift and go to state 39
    INT             shift and go to state 50
    FLOAT           shift and go to state 51

    expresion                      shift and go to state 74
    exp                            shift and go to state 41
    termino                        shift and go to state 42
    factor                         shift and go to state 43
    factor2                        shift and go to state 44
    factor3                        shift and go to state 45
    var_cte                        shift and go to state 48

state 47

    (43) factor3 -> PLUS . var_cte empty
    (46) var_cte -> . ID empty
    (47) var_cte -> . INT empty
    (48) var_cte -> . FLOAT empty

    ID              shift and go to state 39
    INT             shift and go to state 50
    FLOAT           shift and go to state 51

    var_cte                        shift and go to state 75

state 48

    (45) factor3 -> var_cte . empty
    (49) empty -> .

    TIMES           reduce using rule 49 (empty -> .)
    DIVIDE          reduce using rule 49 (empty -> .)
    PLUS            reduce using rule 49 (empty -> .)
    MINUS           reduce using rule 49 (empty -> .)
    G_THAN          reduce using rule 49 (empty -> .)
    L_THAN          reduce using rule 49 (empty -> .)
    DIFF            reduce using rule 49 (empty -> .)
    SEMICOLON       reduce using rule 49 (empty -> .)
    R_PAREN         reduce using rule 49 (empty -> .)
    COMMA           reduce using rule 49 (empty -> .)

    empty                          shift and go to state 76

state 49

    (44) factor3 -> MINUS . var_cte empty
    (46) var_cte -> . ID empty
    (47) var_cte -> . INT empty
    (48) var_cte -> . FLOAT empty

    ID              shift and go to state 39
    INT             shift and go to state 50
    FLOAT           shift and go to state 51

    var_cte                        shift and go to state 77

state 50

    (47) var_cte -> INT . empty
    (49) empty -> .

    TIMES           reduce using rule 49 (empty -> .)
    DIVIDE          reduce using rule 49 (empty -> .)
    PLUS            reduce using rule 49 (empty -> .)
    MINUS           reduce using rule 49 (empty -> .)
    G_THAN          reduce using rule 49 (empty -> .)
    L_THAN          reduce using rule 49 (empty -> .)
    DIFF            reduce using rule 49 (empty -> .)
    SEMICOLON       reduce using rule 49 (empty -> .)
    R_PAREN         reduce using rule 49 (empty -> .)
    COMMA           reduce using rule 49 (empty -> .)

    empty                          shift and go to state 78

state 51

    (48) var_cte -> FLOAT . empty
    (49) empty -> .

    TIMES           reduce using rule 49 (empty -> .)
    DIVIDE          reduce using rule 49 (empty -> .)
    PLUS            reduce using rule 49 (empty -> .)
    MINUS           reduce using rule 49 (empty -> .)
    G_THAN          reduce using rule 49 (empty -> .)
    L_THAN          reduce using rule 49 (empty -> .)
    DIFF            reduce using rule 49 (empty -> .)
    SEMICOLON       reduce using rule 49 (empty -> .)
    R_PAREN         reduce using rule 49 (empty -> .)
    COMMA           reduce using rule 49 (empty -> .)

    empty                          shift and go to state 79

state 52

    (29) condicion -> IF L_PAREN expresion . R_PAREN bloque condicion2 SEMICOLON empty

    R_PAREN         shift and go to state 80


state 53

    (19) escritura -> PRINT L_PAREN escritura2 . R_PAREN SEMICOLON empty

    R_PAREN         shift and go to state 81


state 54

    (20) escritura2 -> expresion . escritura3
    (22) escritura3 -> . COMMA escritura2
    (23) escritura3 -> . empty
    (49) empty -> .

    COMMA           shift and go to state 83
    R_PAREN         reduce using rule 49 (empty -> .)

    escritura3                     shift and go to state 82
    empty                          shift and go to state 84

state 55

    (21) escritura2 -> STRING . escritura3
    (22) escritura3 -> . COMMA escritura2
    (23) escritura3 -> . empty
    (49) empty -> .

    COMMA           shift and go to state 83
    R_PAREN         reduce using rule 49 (empty -> .)

    escritura3                     shift and go to state 85
    empty                          shift and go to state 84

state 56

    (7) vars2 -> ID COLON tipo SEMICOLON . vars3
    (8) vars3 -> . vars2
    (9) vars3 -> . empty
    (6) vars2 -> . ID COMMA vars2
    (7) vars2 -> . ID COLON tipo SEMICOLON vars3
    (49) empty -> .

    ID              shift and go to state 13
    L_BRACE         reduce using rule 49 (empty -> .)

    vars3                          shift and go to state 86
    vars2                          shift and go to state 87
    empty                          shift and go to state 88

state 57

    (10) tipo -> INT empty .

    SEMICOLON       reduce using rule 10 (tipo -> INT empty .)


state 58

    (11) tipo -> FLOAT empty .

    SEMICOLON       reduce using rule 11 (tipo -> FLOAT empty .)


state 59

    (46) var_cte -> ID empty .

    TIMES           reduce using rule 46 (var_cte -> ID empty .)
    DIVIDE          reduce using rule 46 (var_cte -> ID empty .)
    PLUS            reduce using rule 46 (var_cte -> ID empty .)
    MINUS           reduce using rule 46 (var_cte -> ID empty .)
    G_THAN          reduce using rule 46 (var_cte -> ID empty .)
    L_THAN          reduce using rule 46 (var_cte -> ID empty .)
    DIFF            reduce using rule 46 (var_cte -> ID empty .)
    SEMICOLON       reduce using rule 46 (var_cte -> ID empty .)
    R_PAREN         reduce using rule 46 (var_cte -> ID empty .)
    COMMA           reduce using rule 46 (var_cte -> ID empty .)


state 60

    (18) asignacion -> ID EQUAL expresion SEMICOLON . empty
    (49) empty -> .

    ID              reduce using rule 49 (empty -> .)
    IF              reduce using rule 49 (empty -> .)
    PRINT           reduce using rule 49 (empty -> .)
    R_BRACE         reduce using rule 49 (empty -> .)

    empty                          shift and go to state 89

state 61

    (24) expresion -> exp expresion2 .

    SEMICOLON       reduce using rule 24 (expresion -> exp expresion2 .)
    R_PAREN         reduce using rule 24 (expresion -> exp expresion2 .)
    COMMA           reduce using rule 24 (expresion -> exp expresion2 .)


state 62

    (25) expresion2 -> G_THAN . exp empty
    (32) exp -> . termino exp2
    (36) termino -> . factor termino2
    (40) factor -> . factor2
    (41) factor -> . factor3
    (42) factor2 -> . L_PAREN expresion R_PAREN empty
    (43) factor3 -> . PLUS var_cte empty
    (44) factor3 -> . MINUS var_cte empty
    (45) factor3 -> . var_cte empty
    (46) var_cte -> . ID empty
    (47) var_cte -> . INT empty
    (48) var_cte -> . FLOAT empty

    L_PAREN         shift and go to state 46
    PLUS            shift and go to state 47
    MINUS           shift and go to state 49
    ID              shift and go to state 39
    INT             shift and go to state 50
    FLOAT           shift and go to state 51

    exp                            shift and go to state 90
    termino                        shift and go to state 42
    factor                         shift and go to state 43
    factor2                        shift and go to state 44
    factor3                        shift and go to state 45
    var_cte                        shift and go to state 48

state 63

    (28) expresion2 -> empty .

    SEMICOLON       reduce using rule 28 (expresion2 -> empty .)
    R_PAREN         reduce using rule 28 (expresion2 -> empty .)
    COMMA           reduce using rule 28 (expresion2 -> empty .)


state 64

    (26) expresion2 -> L_THAN . exp empty
    (32) exp -> . termino exp2
    (36) termino -> . factor termino2
    (40) factor -> . factor2
    (41) factor -> . factor3
    (42) factor2 -> . L_PAREN expresion R_PAREN empty
    (43) factor3 -> . PLUS var_cte empty
    (44) factor3 -> . MINUS var_cte empty
    (45) factor3 -> . var_cte empty
    (46) var_cte -> . ID empty
    (47) var_cte -> . INT empty
    (48) var_cte -> . FLOAT empty

    L_PAREN         shift and go to state 46
    PLUS            shift and go to state 47
    MINUS           shift and go to state 49
    ID              shift and go to state 39
    INT             shift and go to state 50
    FLOAT           shift and go to state 51

    exp                            shift and go to state 91
    termino                        shift and go to state 42
    factor                         shift and go to state 43
    factor2                        shift and go to state 44
    factor3                        shift and go to state 45
    var_cte                        shift and go to state 48

state 65

    (27) expresion2 -> DIFF . exp empty
    (32) exp -> . termino exp2
    (36) termino -> . factor termino2
    (40) factor -> . factor2
    (41) factor -> . factor3
    (42) factor2 -> . L_PAREN expresion R_PAREN empty
    (43) factor3 -> . PLUS var_cte empty
    (44) factor3 -> . MINUS var_cte empty
    (45) factor3 -> . var_cte empty
    (46) var_cte -> . ID empty
    (47) var_cte -> . INT empty
    (48) var_cte -> . FLOAT empty

    L_PAREN         shift and go to state 46
    PLUS            shift and go to state 47
    MINUS           shift and go to state 49
    ID              shift and go to state 39
    INT             shift and go to state 50
    FLOAT           shift and go to state 51

    exp                            shift and go to state 92
    termino                        shift and go to state 42
    factor                         shift and go to state 43
    factor2                        shift and go to state 44
    factor3                        shift and go to state 45
    var_cte                        shift and go to state 48

state 66

    (32) exp -> termino exp2 .

    G_THAN          reduce using rule 32 (exp -> termino exp2 .)
    L_THAN          reduce using rule 32 (exp -> termino exp2 .)
    DIFF            reduce using rule 32 (exp -> termino exp2 .)
    SEMICOLON       reduce using rule 32 (exp -> termino exp2 .)
    R_PAREN         reduce using rule 32 (exp -> termino exp2 .)
    COMMA           reduce using rule 32 (exp -> termino exp2 .)


state 67

    (33) exp2 -> PLUS . exp
    (32) exp -> . termino exp2
    (36) termino -> . factor termino2
    (40) factor -> . factor2
    (41) factor -> . factor3
    (42) factor2 -> . L_PAREN expresion R_PAREN empty
    (43) factor3 -> . PLUS var_cte empty
    (44) factor3 -> . MINUS var_cte empty
    (45) factor3 -> . var_cte empty
    (46) var_cte -> . ID empty
    (47) var_cte -> . INT empty
    (48) var_cte -> . FLOAT empty

    L_PAREN         shift and go to state 46
    PLUS            shift and go to state 47
    MINUS           shift and go to state 49
    ID              shift and go to state 39
    INT             shift and go to state 50
    FLOAT           shift and go to state 51

    exp                            shift and go to state 93
    termino                        shift and go to state 42
    factor                         shift and go to state 43
    factor2                        shift and go to state 44
    factor3                        shift and go to state 45
    var_cte                        shift and go to state 48

state 68

    (34) exp2 -> MINUS . exp
    (32) exp -> . termino exp2
    (36) termino -> . factor termino2
    (40) factor -> . factor2
    (41) factor -> . factor3
    (42) factor2 -> . L_PAREN expresion R_PAREN empty
    (43) factor3 -> . PLUS var_cte empty
    (44) factor3 -> . MINUS var_cte empty
    (45) factor3 -> . var_cte empty
    (46) var_cte -> . ID empty
    (47) var_cte -> . INT empty
    (48) var_cte -> . FLOAT empty

    L_PAREN         shift and go to state 46
    PLUS            shift and go to state 47
    MINUS           shift and go to state 49
    ID              shift and go to state 39
    INT             shift and go to state 50
    FLOAT           shift and go to state 51

    exp                            shift and go to state 94
    termino                        shift and go to state 42
    factor                         shift and go to state 43
    factor2                        shift and go to state 44
    factor3                        shift and go to state 45
    var_cte                        shift and go to state 48

state 69

    (35) exp2 -> empty .

    G_THAN          reduce using rule 35 (exp2 -> empty .)
    L_THAN          reduce using rule 35 (exp2 -> empty .)
    DIFF            reduce using rule 35 (exp2 -> empty .)
    SEMICOLON       reduce using rule 35 (exp2 -> empty .)
    R_PAREN         reduce using rule 35 (exp2 -> empty .)
    COMMA           reduce using rule 35 (exp2 -> empty .)


state 70

    (36) termino -> factor termino2 .

    PLUS            reduce using rule 36 (termino -> factor termino2 .)
    MINUS           reduce using rule 36 (termino -> factor termino2 .)
    G_THAN          reduce using rule 36 (termino -> factor termino2 .)
    L_THAN          reduce using rule 36 (termino -> factor termino2 .)
    DIFF            reduce using rule 36 (termino -> factor termino2 .)
    SEMICOLON       reduce using rule 36 (termino -> factor termino2 .)
    R_PAREN         reduce using rule 36 (termino -> factor termino2 .)
    COMMA           reduce using rule 36 (termino -> factor termino2 .)


state 71

    (37) termino2 -> TIMES . termino
    (36) termino -> . factor termino2
    (40) factor -> . factor2
    (41) factor -> . factor3
    (42) factor2 -> . L_PAREN expresion R_PAREN empty
    (43) factor3 -> . PLUS var_cte empty
    (44) factor3 -> . MINUS var_cte empty
    (45) factor3 -> . var_cte empty
    (46) var_cte -> . ID empty
    (47) var_cte -> . INT empty
    (48) var_cte -> . FLOAT empty

    L_PAREN         shift and go to state 46
    PLUS            shift and go to state 47
    MINUS           shift and go to state 49
    ID              shift and go to state 39
    INT             shift and go to state 50
    FLOAT           shift and go to state 51

    termino                        shift and go to state 95
    factor                         shift and go to state 43
    factor2                        shift and go to state 44
    factor3                        shift and go to state 45
    var_cte                        shift and go to state 48

state 72

    (38) termino2 -> DIVIDE . termino
    (36) termino -> . factor termino2
    (40) factor -> . factor2
    (41) factor -> . factor3
    (42) factor2 -> . L_PAREN expresion R_PAREN empty
    (43) factor3 -> . PLUS var_cte empty
    (44) factor3 -> . MINUS var_cte empty
    (45) factor3 -> . var_cte empty
    (46) var_cte -> . ID empty
    (47) var_cte -> . INT empty
    (48) var_cte -> . FLOAT empty

    L_PAREN         shift and go to state 46
    PLUS            shift and go to state 47
    MINUS           shift and go to state 49
    ID              shift and go to state 39
    INT             shift and go to state 50
    FLOAT           shift and go to state 51

    termino                        shift and go to state 96
    factor                         shift and go to state 43
    factor2                        shift and go to state 44
    factor3                        shift and go to state 45
    var_cte                        shift and go to state 48

state 73

    (39) termino2 -> empty .

    PLUS            reduce using rule 39 (termino2 -> empty .)
    MINUS           reduce using rule 39 (termino2 -> empty .)
    G_THAN          reduce using rule 39 (termino2 -> empty .)
    L_THAN          reduce using rule 39 (termino2 -> empty .)
    DIFF            reduce using rule 39 (termino2 -> empty .)
    SEMICOLON       reduce using rule 39 (termino2 -> empty .)
    R_PAREN         reduce using rule 39 (termino2 -> empty .)
    COMMA           reduce using rule 39 (termino2 -> empty .)


state 74

    (42) factor2 -> L_PAREN expresion . R_PAREN empty

    R_PAREN         shift and go to state 97


state 75

    (43) factor3 -> PLUS var_cte . empty
    (49) empty -> .

    TIMES           reduce using rule 49 (empty -> .)
    DIVIDE          reduce using rule 49 (empty -> .)
    PLUS            reduce using rule 49 (empty -> .)
    MINUS           reduce using rule 49 (empty -> .)
    G_THAN          reduce using rule 49 (empty -> .)
    L_THAN          reduce using rule 49 (empty -> .)
    DIFF            reduce using rule 49 (empty -> .)
    SEMICOLON       reduce using rule 49 (empty -> .)
    R_PAREN         reduce using rule 49 (empty -> .)
    COMMA           reduce using rule 49 (empty -> .)

    empty                          shift and go to state 98

state 76

    (45) factor3 -> var_cte empty .

    TIMES           reduce using rule 45 (factor3 -> var_cte empty .)
    DIVIDE          reduce using rule 45 (factor3 -> var_cte empty .)
    PLUS            reduce using rule 45 (factor3 -> var_cte empty .)
    MINUS           reduce using rule 45 (factor3 -> var_cte empty .)
    G_THAN          reduce using rule 45 (factor3 -> var_cte empty .)
    L_THAN          reduce using rule 45 (factor3 -> var_cte empty .)
    DIFF            reduce using rule 45 (factor3 -> var_cte empty .)
    SEMICOLON       reduce using rule 45 (factor3 -> var_cte empty .)
    R_PAREN         reduce using rule 45 (factor3 -> var_cte empty .)
    COMMA           reduce using rule 45 (factor3 -> var_cte empty .)


state 77

    (44) factor3 -> MINUS var_cte . empty
    (49) empty -> .

    TIMES           reduce using rule 49 (empty -> .)
    DIVIDE          reduce using rule 49 (empty -> .)
    PLUS            reduce using rule 49 (empty -> .)
    MINUS           reduce using rule 49 (empty -> .)
    G_THAN          reduce using rule 49 (empty -> .)
    L_THAN          reduce using rule 49 (empty -> .)
    DIFF            reduce using rule 49 (empty -> .)
    SEMICOLON       reduce using rule 49 (empty -> .)
    R_PAREN         reduce using rule 49 (empty -> .)
    COMMA           reduce using rule 49 (empty -> .)

    empty                          shift and go to state 99

state 78

    (47) var_cte -> INT empty .

    TIMES           reduce using rule 47 (var_cte -> INT empty .)
    DIVIDE          reduce using rule 47 (var_cte -> INT empty .)
    PLUS            reduce using rule 47 (var_cte -> INT empty .)
    MINUS           reduce using rule 47 (var_cte -> INT empty .)
    G_THAN          reduce using rule 47 (var_cte -> INT empty .)
    L_THAN          reduce using rule 47 (var_cte -> INT empty .)
    DIFF            reduce using rule 47 (var_cte -> INT empty .)
    SEMICOLON       reduce using rule 47 (var_cte -> INT empty .)
    R_PAREN         reduce using rule 47 (var_cte -> INT empty .)
    COMMA           reduce using rule 47 (var_cte -> INT empty .)


state 79

    (48) var_cte -> FLOAT empty .

    TIMES           reduce using rule 48 (var_cte -> FLOAT empty .)
    DIVIDE          reduce using rule 48 (var_cte -> FLOAT empty .)
    PLUS            reduce using rule 48 (var_cte -> FLOAT empty .)
    MINUS           reduce using rule 48 (var_cte -> FLOAT empty .)
    G_THAN          reduce using rule 48 (var_cte -> FLOAT empty .)
    L_THAN          reduce using rule 48 (var_cte -> FLOAT empty .)
    DIFF            reduce using rule 48 (var_cte -> FLOAT empty .)
    SEMICOLON       reduce using rule 48 (var_cte -> FLOAT empty .)
    R_PAREN         reduce using rule 48 (var_cte -> FLOAT empty .)
    COMMA           reduce using rule 48 (var_cte -> FLOAT empty .)


state 80

    (29) condicion -> IF L_PAREN expresion R_PAREN . bloque condicion2 SEMICOLON empty
    (12) bloque -> . L_BRACE bloque2 R_BRACE empty

    L_BRACE         shift and go to state 10

    bloque                         shift and go to state 100

state 81

    (19) escritura -> PRINT L_PAREN escritura2 R_PAREN . SEMICOLON empty

    SEMICOLON       shift and go to state 101


state 82

    (20) escritura2 -> expresion escritura3 .

    R_PAREN         reduce using rule 20 (escritura2 -> expresion escritura3 .)


state 83

    (22) escritura3 -> COMMA . escritura2
    (20) escritura2 -> . expresion escritura3
    (21) escritura2 -> . STRING escritura3
    (24) expresion -> . exp expresion2
    (32) exp -> . termino exp2
    (36) termino -> . factor termino2
    (40) factor -> . factor2
    (41) factor -> . factor3
    (42) factor2 -> . L_PAREN expresion R_PAREN empty
    (43) factor3 -> . PLUS var_cte empty
    (44) factor3 -> . MINUS var_cte empty
    (45) factor3 -> . var_cte empty
    (46) var_cte -> . ID empty
    (47) var_cte -> . INT empty
    (48) var_cte -> . FLOAT empty

    STRING          shift and go to state 55
    L_PAREN         shift and go to state 46
    PLUS            shift and go to state 47
    MINUS           shift and go to state 49
    ID              shift and go to state 39
    INT             shift and go to state 50
    FLOAT           shift and go to state 51

    escritura2                     shift and go to state 102
    expresion                      shift and go to state 54
    exp                            shift and go to state 41
    termino                        shift and go to state 42
    factor                         shift and go to state 43
    factor2                        shift and go to state 44
    factor3                        shift and go to state 45
    var_cte                        shift and go to state 48

state 84

    (23) escritura3 -> empty .

    R_PAREN         reduce using rule 23 (escritura3 -> empty .)


state 85

    (21) escritura2 -> STRING escritura3 .

    R_PAREN         reduce using rule 21 (escritura2 -> STRING escritura3 .)


state 86

    (7) vars2 -> ID COLON tipo SEMICOLON vars3 .

    L_BRACE         reduce using rule 7 (vars2 -> ID COLON tipo SEMICOLON vars3 .)


state 87

    (8) vars3 -> vars2 .

    L_BRACE         reduce using rule 8 (vars3 -> vars2 .)


state 88

    (9) vars3 -> empty .

    L_BRACE         reduce using rule 9 (vars3 -> empty .)


state 89

    (18) asignacion -> ID EQUAL expresion SEMICOLON empty .

    ID              reduce using rule 18 (asignacion -> ID EQUAL expresion SEMICOLON empty .)
    IF              reduce using rule 18 (asignacion -> ID EQUAL expresion SEMICOLON empty .)
    PRINT           reduce using rule 18 (asignacion -> ID EQUAL expresion SEMICOLON empty .)
    R_BRACE         reduce using rule 18 (asignacion -> ID EQUAL expresion SEMICOLON empty .)


state 90

    (25) expresion2 -> G_THAN exp . empty
    (49) empty -> .

    SEMICOLON       reduce using rule 49 (empty -> .)
    R_PAREN         reduce using rule 49 (empty -> .)
    COMMA           reduce using rule 49 (empty -> .)

    empty                          shift and go to state 103

state 91

    (26) expresion2 -> L_THAN exp . empty
    (49) empty -> .

    SEMICOLON       reduce using rule 49 (empty -> .)
    R_PAREN         reduce using rule 49 (empty -> .)
    COMMA           reduce using rule 49 (empty -> .)

    empty                          shift and go to state 104

state 92

    (27) expresion2 -> DIFF exp . empty
    (49) empty -> .

    SEMICOLON       reduce using rule 49 (empty -> .)
    R_PAREN         reduce using rule 49 (empty -> .)
    COMMA           reduce using rule 49 (empty -> .)

    empty                          shift and go to state 105

state 93

    (33) exp2 -> PLUS exp .

    G_THAN          reduce using rule 33 (exp2 -> PLUS exp .)
    L_THAN          reduce using rule 33 (exp2 -> PLUS exp .)
    DIFF            reduce using rule 33 (exp2 -> PLUS exp .)
    SEMICOLON       reduce using rule 33 (exp2 -> PLUS exp .)
    R_PAREN         reduce using rule 33 (exp2 -> PLUS exp .)
    COMMA           reduce using rule 33 (exp2 -> PLUS exp .)


state 94

    (34) exp2 -> MINUS exp .

    G_THAN          reduce using rule 34 (exp2 -> MINUS exp .)
    L_THAN          reduce using rule 34 (exp2 -> MINUS exp .)
    DIFF            reduce using rule 34 (exp2 -> MINUS exp .)
    SEMICOLON       reduce using rule 34 (exp2 -> MINUS exp .)
    R_PAREN         reduce using rule 34 (exp2 -> MINUS exp .)
    COMMA           reduce using rule 34 (exp2 -> MINUS exp .)


state 95

    (37) termino2 -> TIMES termino .

    PLUS            reduce using rule 37 (termino2 -> TIMES termino .)
    MINUS           reduce using rule 37 (termino2 -> TIMES termino .)
    G_THAN          reduce using rule 37 (termino2 -> TIMES termino .)
    L_THAN          reduce using rule 37 (termino2 -> TIMES termino .)
    DIFF            reduce using rule 37 (termino2 -> TIMES termino .)
    SEMICOLON       reduce using rule 37 (termino2 -> TIMES termino .)
    R_PAREN         reduce using rule 37 (termino2 -> TIMES termino .)
    COMMA           reduce using rule 37 (termino2 -> TIMES termino .)


state 96

    (38) termino2 -> DIVIDE termino .

    PLUS            reduce using rule 38 (termino2 -> DIVIDE termino .)
    MINUS           reduce using rule 38 (termino2 -> DIVIDE termino .)
    G_THAN          reduce using rule 38 (termino2 -> DIVIDE termino .)
    L_THAN          reduce using rule 38 (termino2 -> DIVIDE termino .)
    DIFF            reduce using rule 38 (termino2 -> DIVIDE termino .)
    SEMICOLON       reduce using rule 38 (termino2 -> DIVIDE termino .)
    R_PAREN         reduce using rule 38 (termino2 -> DIVIDE termino .)
    COMMA           reduce using rule 38 (termino2 -> DIVIDE termino .)


state 97

    (42) factor2 -> L_PAREN expresion R_PAREN . empty
    (49) empty -> .

    TIMES           reduce using rule 49 (empty -> .)
    DIVIDE          reduce using rule 49 (empty -> .)
    PLUS            reduce using rule 49 (empty -> .)
    MINUS           reduce using rule 49 (empty -> .)
    G_THAN          reduce using rule 49 (empty -> .)
    L_THAN          reduce using rule 49 (empty -> .)
    DIFF            reduce using rule 49 (empty -> .)
    SEMICOLON       reduce using rule 49 (empty -> .)
    R_PAREN         reduce using rule 49 (empty -> .)
    COMMA           reduce using rule 49 (empty -> .)

    empty                          shift and go to state 106

state 98

    (43) factor3 -> PLUS var_cte empty .

    TIMES           reduce using rule 43 (factor3 -> PLUS var_cte empty .)
    DIVIDE          reduce using rule 43 (factor3 -> PLUS var_cte empty .)
    PLUS            reduce using rule 43 (factor3 -> PLUS var_cte empty .)
    MINUS           reduce using rule 43 (factor3 -> PLUS var_cte empty .)
    G_THAN          reduce using rule 43 (factor3 -> PLUS var_cte empty .)
    L_THAN          reduce using rule 43 (factor3 -> PLUS var_cte empty .)
    DIFF            reduce using rule 43 (factor3 -> PLUS var_cte empty .)
    SEMICOLON       reduce using rule 43 (factor3 -> PLUS var_cte empty .)
    R_PAREN         reduce using rule 43 (factor3 -> PLUS var_cte empty .)
    COMMA           reduce using rule 43 (factor3 -> PLUS var_cte empty .)


state 99

    (44) factor3 -> MINUS var_cte empty .

    TIMES           reduce using rule 44 (factor3 -> MINUS var_cte empty .)
    DIVIDE          reduce using rule 44 (factor3 -> MINUS var_cte empty .)
    PLUS            reduce using rule 44 (factor3 -> MINUS var_cte empty .)
    MINUS           reduce using rule 44 (factor3 -> MINUS var_cte empty .)
    G_THAN          reduce using rule 44 (factor3 -> MINUS var_cte empty .)
    L_THAN          reduce using rule 44 (factor3 -> MINUS var_cte empty .)
    DIFF            reduce using rule 44 (factor3 -> MINUS var_cte empty .)
    SEMICOLON       reduce using rule 44 (factor3 -> MINUS var_cte empty .)
    R_PAREN         reduce using rule 44 (factor3 -> MINUS var_cte empty .)
    COMMA           reduce using rule 44 (factor3 -> MINUS var_cte empty .)


state 100

    (29) condicion -> IF L_PAREN expresion R_PAREN bloque . condicion2 SEMICOLON empty
    (30) condicion2 -> . ELSE bloque empty
    (31) condicion2 -> . empty
    (49) empty -> .

    ELSE            shift and go to state 109
    SEMICOLON       reduce using rule 49 (empty -> .)

    condicion2                     shift and go to state 107
    empty                          shift and go to state 108

state 101

    (19) escritura -> PRINT L_PAREN escritura2 R_PAREN SEMICOLON . empty
    (49) empty -> .

    ID              reduce using rule 49 (empty -> .)
    IF              reduce using rule 49 (empty -> .)
    PRINT           reduce using rule 49 (empty -> .)
    R_BRACE         reduce using rule 49 (empty -> .)

    empty                          shift and go to state 110

state 102

    (22) escritura3 -> COMMA escritura2 .

    R_PAREN         reduce using rule 22 (escritura3 -> COMMA escritura2 .)


state 103

    (25) expresion2 -> G_THAN exp empty .

    SEMICOLON       reduce using rule 25 (expresion2 -> G_THAN exp empty .)
    R_PAREN         reduce using rule 25 (expresion2 -> G_THAN exp empty .)
    COMMA           reduce using rule 25 (expresion2 -> G_THAN exp empty .)


state 104

    (26) expresion2 -> L_THAN exp empty .

    SEMICOLON       reduce using rule 26 (expresion2 -> L_THAN exp empty .)
    R_PAREN         reduce using rule 26 (expresion2 -> L_THAN exp empty .)
    COMMA           reduce using rule 26 (expresion2 -> L_THAN exp empty .)


state 105

    (27) expresion2 -> DIFF exp empty .

    SEMICOLON       reduce using rule 27 (expresion2 -> DIFF exp empty .)
    R_PAREN         reduce using rule 27 (expresion2 -> DIFF exp empty .)
    COMMA           reduce using rule 27 (expresion2 -> DIFF exp empty .)


state 106

    (42) factor2 -> L_PAREN expresion R_PAREN empty .

    TIMES           reduce using rule 42 (factor2 -> L_PAREN expresion R_PAREN empty .)
    DIVIDE          reduce using rule 42 (factor2 -> L_PAREN expresion R_PAREN empty .)
    PLUS            reduce using rule 42 (factor2 -> L_PAREN expresion R_PAREN empty .)
    MINUS           reduce using rule 42 (factor2 -> L_PAREN expresion R_PAREN empty .)
    G_THAN          reduce using rule 42 (factor2 -> L_PAREN expresion R_PAREN empty .)
    L_THAN          reduce using rule 42 (factor2 -> L_PAREN expresion R_PAREN empty .)
    DIFF            reduce using rule 42 (factor2 -> L_PAREN expresion R_PAREN empty .)
    SEMICOLON       reduce using rule 42 (factor2 -> L_PAREN expresion R_PAREN empty .)
    R_PAREN         reduce using rule 42 (factor2 -> L_PAREN expresion R_PAREN empty .)
    COMMA           reduce using rule 42 (factor2 -> L_PAREN expresion R_PAREN empty .)


state 107

    (29) condicion -> IF L_PAREN expresion R_PAREN bloque condicion2 . SEMICOLON empty

    SEMICOLON       shift and go to state 111


state 108

    (31) condicion2 -> empty .

    SEMICOLON       reduce using rule 31 (condicion2 -> empty .)


state 109

    (30) condicion2 -> ELSE . bloque empty
    (12) bloque -> . L_BRACE bloque2 R_BRACE empty

    L_BRACE         shift and go to state 10

    bloque                         shift and go to state 112

state 110

    (19) escritura -> PRINT L_PAREN escritura2 R_PAREN SEMICOLON empty .

    ID              reduce using rule 19 (escritura -> PRINT L_PAREN escritura2 R_PAREN SEMICOLON empty .)
    IF              reduce using rule 19 (escritura -> PRINT L_PAREN escritura2 R_PAREN SEMICOLON empty .)
    PRINT           reduce using rule 19 (escritura -> PRINT L_PAREN escritura2 R_PAREN SEMICOLON empty .)
    R_BRACE         reduce using rule 19 (escritura -> PRINT L_PAREN escritura2 R_PAREN SEMICOLON empty .)


state 111

    (29) condicion -> IF L_PAREN expresion R_PAREN bloque condicion2 SEMICOLON . empty
    (49) empty -> .

    ID              reduce using rule 49 (empty -> .)
    IF              reduce using rule 49 (empty -> .)
    PRINT           reduce using rule 49 (empty -> .)
    R_BRACE         reduce using rule 49 (empty -> .)

    empty                          shift and go to state 113

state 112

    (30) condicion2 -> ELSE bloque . empty
    (49) empty -> .

    SEMICOLON       reduce using rule 49 (empty -> .)

    empty                          shift and go to state 114

state 113

    (29) condicion -> IF L_PAREN expresion R_PAREN bloque condicion2 SEMICOLON empty .

    ID              reduce using rule 29 (condicion -> IF L_PAREN expresion R_PAREN bloque condicion2 SEMICOLON empty .)
    IF              reduce using rule 29 (condicion -> IF L_PAREN expresion R_PAREN bloque condicion2 SEMICOLON empty .)
    PRINT           reduce using rule 29 (condicion -> IF L_PAREN expresion R_PAREN bloque condicion2 SEMICOLON empty .)
    R_BRACE         reduce using rule 29 (condicion -> IF L_PAREN expresion R_PAREN bloque condicion2 SEMICOLON empty .)


state 114

    (30) condicion2 -> ELSE bloque empty .

    SEMICOLON       reduce using rule 30 (condicion2 -> ELSE bloque empty .)

